import psycopg2
import os

# Configuration de connexion Supabase 
# Note: Ces informations sont extraites de la configuration publique
DATABASE_URL = "postgresql://postgres.khgbnikgsptoflokvtzu:oBiK8eCzEQ1hfMDQ@aws-0-eu-central-1.pooler.supabase.com:6543/postgres"

def deploy_sql_functions():
    try:
        print("üîó Connexion √† Supabase...")
        
        # Lire le fichier SQL de migration
        with open('/app/supabase/migrations/20250125000001_chef_agent_dashboard_kpis.sql', 'r') as f:
            sql_content = f.read()
        
        print("üìÑ Migration SQL charg√©e")
        print("üöÄ Ex√©cution des fonctions RPC...")
        
        # Diviser le contenu en instructions individuelles
        sql_statements = sql_content.split(';')
        
        # Connexion √† la base de donn√©es
        conn = psycopg2.connect(DATABASE_URL)
        cursor = conn.cursor()
        
        success_count = 0
        error_count = 0
        
        for i, statement in enumerate(sql_statements):
            statement = statement.strip()
            if not statement or statement.startswith('--'):
                continue
                
            try:
                cursor.execute(statement + ';')
                conn.commit()
                success_count += 1
                
                # Extraire le nom de la fonction pour le log
                if 'CREATE OR REPLACE FUNCTION' in statement:
                    func_name = statement.split('public.')[1].split('(')[0] if 'public.' in statement else 'fonction'
                    print(f"‚úÖ Fonction cr√©√©e: {func_name}")
                    
            except Exception as e:
                error_count += 1
                if 'CREATE OR REPLACE FUNCTION' in statement:
                    func_name = statement.split('public.')[1].split('(')[0] if 'public.' in statement else 'fonction'
                    print(f"‚ùå Erreur {func_name}: {str(e)[:100]}...")
                
        cursor.close()
        conn.close()
        
        print(f"\nüìä R√©sultat du d√©ploiement:")
        print(f"   ‚úÖ R√©ussies: {success_count}")
        print(f"   ‚ùå Erreurs: {error_count}")
        
        if success_count > 0:
            print("\nüéâ Fonctions RPC d√©ploy√©es avec succ√®s !")
            return True
        else:
            print("\n‚ö†Ô∏è Aucune fonction n'a √©t√© d√©ploy√©e")
            return False
            
    except ImportError:
        print("‚ùå psycopg2 non install√©. Installation en cours...")
        os.system("pip install psycopg2-binary")
        print("‚úÖ psycopg2 install√©. Relancez le script.")
        return False
        
    except Exception as e:
        print(f"‚ùå Erreur de connexion/d√©ploiement: {str(e)}")
        
        # M√©thode alternative via fichier SQL 
        print("\nüîÑ Tentative d'une m√©thode alternative...")
        return create_sql_script()

def create_sql_script():
    """Cr√©e un script SQL autonome pour d√©ploiement manuel"""
    try:
        with open('/app/supabase/migrations/20250125000001_chef_agent_dashboard_kpis.sql', 'r') as f:
            migration_content = f.read()
        
        # Cr√©er un script optimis√©
        optimized_sql = f"""
-- Script de d√©ploiement optimis√© pour les fonctions Dashboard KPIs
-- √Ä ex√©cuter dans l'√©diteur SQL Supabase

-- V√©rification pr√©alable
DO $$
BEGIN
    RAISE NOTICE 'D√©ploiement des fonctions Dashboard KPIs...';
END $$;

{migration_content}

-- V√©rification finale
DO $$
BEGIN
    RAISE NOTICE 'D√©ploiement termin√©. Fonctions cr√©√©es:';
    RAISE NOTICE '- get_chef_agence_dashboard_kpis()';
    RAISE NOTICE '- get_agent_dashboard_kpis()';
    RAISE NOTICE '- get_chef_agents_performance(p_limit)';
END $$;
"""
        
        with open('/app/deploy_dashboard_kpis.sql', 'w') as f:
            f.write(optimized_sql)
        
        print("‚úÖ Script SQL cr√©√©: /app/deploy_dashboard_kpis.sql")
        print("üí° Pour d√©ployer manuellement:")
        print("   1. Ouvrez l'√©diteur SQL Supabase")
        print("   2. Copiez le contenu du fichier deploy_dashboard_kpis.sql")
        print("   3. Ex√©cutez le script")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation script: {str(e)}")
        return False

if __name__ == "__main__":
    print("=" * 60)
    print("üéØ D√âPLOIEMENT DIRECT DES FONCTIONS RPC")
    print("=" * 60)
    
    success = deploy_sql_functions()
    
    if success:
        print("\nüîÑ Phase suivante: Test des fonctions...")
    else:
        print("\n‚ö†Ô∏è D√©ploiement manuel requis")