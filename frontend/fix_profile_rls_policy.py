#!/usr/bin/env python3
"""
Script pour corriger les politiques RLS manquantes sur la table profiles
Permet aux utilisateurs de lire leur propre profil pour r√©soudre l'erreur 406.
"""

import os
from supabase import create_client, Client

# Configuration Supabase
SUPABASE_URL = "https://khgbnikgsptoflokvtzu.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"

# Cl√© service_role pour les op√©rations admin (n√©cessaire pour cr√©er des politiques RLS)
SUPABASE_SERVICE_ROLE_KEY = os.environ.get('SUPABASE_SERVICE_ROLE_KEY')

def check_current_policies():
    """V√©rifie les politiques RLS actuelles sur la table profiles"""
    print("üîç V√©rification des politiques RLS actuelles...")
    
    # On utilise la cl√© publique pour les requ√™tes de base
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # Test : essayer de faire une requ√™te √† la table profiles
        result = supabase.table('profiles').select('*').limit(1).execute()
        print(f"‚úÖ Requ√™te profiles r√©ussie : {len(result.data)} lignes")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la requ√™te profiles : {str(e)}")
        return False

def test_user_role_query():
    """Test sp√©cifique de la requ√™te qui pose probl√®me dans AuthContext"""
    print("\nüîç Test de la requ√™te user_roles qui pose probl√®me...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # Simuler la requ√™te probl√©matique dans AuthContext
        result = supabase.table('user_roles').select('*, roles(name, label)').eq('is_active', True).limit(1).execute()
        print(f"‚úÖ Requ√™te user_roles r√©ussie : {len(result.data)} lignes")
        
        if result.data:
            print(f"üìã Exemple de donn√©es : {result.data[0]}")
            
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la requ√™te user_roles : {str(e)}")
        return False

def create_missing_rls_policies():
    """Cr√©e les politiques RLS manquantes si n√©cessaire"""
    print("\nüõ†Ô∏è  Cr√©ation des politiques RLS manquantes...")
    
    if not SUPABASE_SERVICE_ROLE_KEY:
        print("‚ùå SUPABASE_SERVICE_ROLE_KEY non d√©finie. Politique RLS √† cr√©er manuellement.")
        print("\nPolitique SQL √† ex√©cuter dans le dashboard Supabase :")
        print("=" * 60)
        print("""
-- Politique pour permettre aux utilisateurs de voir leur propre profil
CREATE POLICY "Users can view their own profile" ON public.profiles
FOR SELECT TO authenticated
USING (auth.uid() = id);

-- Politique pour permettre aux utilisateurs de voir leurs propres r√¥les
CREATE POLICY "Users can view their own roles" ON public.user_roles
FOR SELECT TO authenticated
USING (auth.uid() = user_id);
        """)
        print("=" * 60)
        return False
    
    # Si on a la cl√© service_role, on peut cr√©er les politiques
    supabase_admin: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)
    
    policies_sql = """
    -- Politique pour permettre aux utilisateurs de voir leur propre profil
    CREATE POLICY IF NOT EXISTS "Users can view their own profile" ON public.profiles
    FOR SELECT TO authenticated
    USING (auth.uid() = id);

    -- Politique pour permettre aux utilisateurs de voir leurs propres r√¥les
    CREATE POLICY IF NOT EXISTS "Users can view their own roles" ON public.user_roles
    FOR SELECT TO authenticated
    USING (auth.uid() = user_id);
    """
    
    try:
        result = supabase_admin.rpc('exec', {'sql': policies_sql}).execute()
        print("‚úÖ Politiques RLS cr√©√©es avec succ√®s")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des politiques : {str(e)}")
        return False

def test_demo_authentication():
    """Test d'authentification avec les comptes d√©mo"""
    print("\nüîê Test d'authentification avec les comptes d√©mo...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    demo_accounts = [
        ("admin_monel@transflownexus.demo", "admin123"),
        ("chef_dakar_diallo@transflownexus.demo", "chef123"),
        ("dkr01_fatou@transflownexus.demo", "agent123"),
        ("sadmin_pierre@transflownexus.demo", "sadmin123")
    ]
    
    successful_logins = 0
    
    for email, password in demo_accounts:
        try:
            print(f"\nüîë Test de connexion : {email}")
            
            # Tentative de connexion
            auth_response = supabase.auth.sign_in_with_password({
                "email": email,
                "password": password
            })
            
            if auth_response.user:
                print(f"‚úÖ Connexion r√©ussie pour {email}")
                user_id = auth_response.user.id
                
                # Test de r√©cup√©ration du profil
                try:
                    profile_response = supabase.table('profiles').select('*, agencies(name)').eq('id', user_id).single().execute()
                    print(f"‚úÖ Profil r√©cup√©r√© : {profile_response.data.get('name', 'N/A')}")
                    
                    # Test sp√©cifique de r√©cup√©ration des r√¥les
                    try:
                        roles_response = supabase.table('user_roles').select('*, roles(name, label)').eq('user_id', user_id).eq('is_active', True).single().execute()
                        role_name = roles_response.data.get('roles', {}).get('name', 'N/A')
                        print(f"‚úÖ R√¥le r√©cup√©r√© : {role_name}")
                        successful_logins += 1
                    except Exception as role_error:
                        print(f"‚ùå Erreur r√©cup√©ration r√¥le : {str(role_error)}")
                        
                except Exception as profile_error:
                    print(f"‚ùå Erreur r√©cup√©ration profil : {str(profile_error)}")
                
                # D√©connexion
                supabase.auth.sign_out()
                
            else:
                print(f"‚ùå √âchec de connexion pour {email}")
                
        except Exception as e:
            print(f"‚ùå Erreur lors du test {email} : {str(e)}")
    
    print(f"\nüìä R√©sum√© : {successful_logins}/{len(demo_accounts)} connexions r√©ussies avec r√©cup√©ration de r√¥le")
    return successful_logins == len(demo_accounts)

def main():
    """Fonction principale"""
    print("üöÄ Diagnostic et correction des politiques RLS pour TransFlow Nexus")
    print("=" * 70)
    
    # 1. V√©rifier l'√©tat actuel
    profiles_ok = check_current_policies()
    user_roles_ok = test_user_role_query()
    
    # 2. Si probl√®me, proposer la correction
    if not profiles_ok or not user_roles_ok:
        print("\n‚ö†Ô∏è  Probl√®me d√©tect√© avec les politiques RLS")
        create_missing_rls_policies()
    
    # 3. Test d'authentification des comptes d√©mo
    test_demo_authentication()
    
    print("\n" + "=" * 70)
    print("‚úÖ Diagnostic termin√©. V√©rifiez les r√©sultats ci-dessus.")
    
    if not profiles_ok or not user_roles_ok:
        print("\nüìù Action requise :")
        print("   1. Copiez le SQL affich√© ci-dessus")
        print("   2. Allez dans le dashboard Supabase > SQL Editor")
        print("   3. Ex√©cutez le SQL pour cr√©er les politiques manquantes")
        print("   4. Relancez ce script pour v√©rifier")

if __name__ == "__main__":
    main()