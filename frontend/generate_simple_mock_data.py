#!/usr/bin/env python3
"""
G√©n√©rateur de donn√©es mock utilisant les fonctions RPC de Supabase
"""

import os
import json
import uuid
from datetime import datetime, timedelta
import random
from supabase import create_client, Client

# Configuration Supabase
SUPABASE_URL = "https://khgbnikgsptoflokvtzu.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"

# Donn√©es r√©alistes
FIRST_NAMES = [
    "Ahmed", "Aminata", "Ousmane", "Fatou", "Mamadou", "Aissatou", 
    "Ibrahim", "Maryam", "Moussa", "Khadija", "Alassane", "Bineta",
    "Seydou", "Ramata", "Bakary", "Ndeye", "Cheikh", "Adama"
]

LAST_NAMES = [
    "Diallo", "Traor√©", "Ciss√©", "Kone", "Camara", "Tour√©", 
    "Bah", "Sow", "Barry", "Bald√©", "Keita", "Fofana",
    "Diakit√©", "Sanogo", "Coulibaly", "Doumbia", "Kanoute", "Sidib√©"
]

class SimpleDataGenerator:
    """G√©n√©rateur simplifi√© utilisant les RPC functions"""
    
    def __init__(self):
        self.supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
        self.created_users = []
        
    def generate_phone(self) -> str:
        """G√©n√®re un num√©ro de t√©l√©phone r√©aliste"""
        prefixes = ["77", "78", "70", "76", "75"]
        return f"+221{random.choice(prefixes)}{random.randint(1000000, 9999999)}"
    
    def create_agencies_direct(self):
        """Cr√©e les agences directement avec une requ√™te SQL"""
        print("üè¢ Cr√©ation des agences...")
        
        try:
            # Ins√©rer directement via SQL pour contourner RLS
            query = """
            INSERT INTO agencies (name, city, is_active) 
            VALUES 
                ('Agence de Douala', 'Douala', true),
                ('Agence de Yaound√©', 'Yaound√©', true)
            ON CONFLICT (name) DO NOTHING
            RETURNING *;
            """
            
            result = self.supabase.rpc('exec_sql', {'query': query}).execute()
            print(f"‚úÖ Agences cr√©√©es via SQL direct")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des agences: {e}")
            
            # Essayer une approche alternative : v√©rifier les agences existantes
            try:
                existing_agencies = self.supabase.table('agencies').select('*').execute()
                if len(existing_agencies.data) == 0:
                    # Si aucune agence, essayer de cr√©er via une fonction personnalis√©e
                    agencies_data = [
                        {"name": "Agence de Douala", "city": "Douala", "is_active": True},
                        {"name": "Agence de Yaound√©", "city": "Yaound√©", "is_active": True}
                    ]
                    
                    for agency_data in agencies_data:
                        try:
                            self.supabase.table('agencies').insert(agency_data).execute()
                            print(f"‚úÖ Agence {agency_data['name']} cr√©√©e")
                        except Exception as e2:
                            print(f"‚ùå Erreur sp√©cifique agence: {e2}")
                else:
                    print(f"‚úÖ {len(existing_agencies.data)} agences d√©j√† existantes")
                    
            except Exception as e3:
                print(f"‚ùå Erreur alternative: {e3}")
    
    def get_agencies(self):
        """R√©cup√®re les agences existantes"""
        try:
            result = self.supabase.table('agencies').select('*').execute()
            return result.data
        except Exception as e:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des agences: {e}")
            return []
    
    def create_demo_users_via_rpc(self):
        """Cr√©e les utilisateurs en utilisant les fonctions RPC"""
        print("üë• Cr√©ation des utilisateurs via RPC...")
        
        # R√©cup√©rer les agences
        agencies = self.get_agencies()
        if len(agencies) < 2:
            print("‚ùå Pas assez d'agences, cr√©ation impossible")
            return
        
        users_to_create = [
            # Admin g√©n√©ral
            {
                "function": "create_admin_user",
                "params": {
                    "user_name": "Admin G√©n√©ral",
                    "user_email": "admin.general@transflow.com",
                    "user_password": "Demo123!"
                }
            },
            # Sous-admin
            {
                "function": "create_sous_admin",
                "params": {
                    "user_name": "Sous Admin",
                    "user_email": "sous.admin@transflow.com", 
                    "user_password": "Demo123!"
                }
            },
            # Chefs d'agence
            {
                "function": "create_chef_agence",
                "params": {
                    "user_name": f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}",
                    "user_email": "chef.douala@transflow.com",
                    "user_password": "Demo123!",
                    "agency_id": agencies[0]['id']
                }
            },
            {
                "function": "create_chef_agence", 
                "params": {
                    "user_name": f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}",
                    "user_email": "chef.yaound√©@transflow.com",
                    "user_password": "Demo123!",
                    "agency_id": agencies[1]['id']
                }
            }
        ]
        
        # Ajouter des agents
        for i in range(8):
            agency_id = agencies[i % len(agencies)]['id']
            city = agencies[i % len(agencies)]['city'].lower()
            
            agent_data = {
                "function": "create_agent",
                "params": {
                    "user_name": f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}",
                    "user_email": f"agent{i+1}.{city}@transflow.com",
                    "user_password": "Demo123!",
                    "agency_id": agency_id
                }
            }
            users_to_create.append(agent_data)
        
        # Cr√©er les utilisateurs
        for user_config in users_to_create:
            try:
                result = self.supabase.rpc(user_config["function"], user_config["params"]).execute()
                if result.data:
                    user_id = result.data
                    self.created_users.append({
                        "id": user_id,
                        "email": user_config["params"]["user_email"],
                        "name": user_config["params"]["user_name"]
                    })
                    print(f"‚úÖ Utilisateur cr√©√©: {user_config['params']['user_email']}")
                else:
                    print(f"‚ùå Erreur lors de la cr√©ation de {user_config['params']['user_email']}")
                    
            except Exception as e:
                print(f"‚ùå Erreur RPC pour {user_config['params']['user_email']}: {e}")
    
    def create_developer_manual(self):
        """Cr√©e un compte d√©veloppeur manuellement"""
        print("üíª Cr√©ation du compte d√©veloppeur...")
        
        try:
            # Cr√©er d'abord l'utilisateur auth
            auth_data = {
                "email": "developer@transflow.com",
                "password": "Demo123!",
                "user_metadata": {
                    "name": "D√©veloppeur System"
                }
            }
            
            # Essayer de cr√©er via l'API auth admin (si disponible)
            # Sinon, on cr√©era juste le profil
            
            developer_profile = {
                "id": str(uuid.uuid4()),
                "email": "developer@transflow.com",
                "name": "D√©veloppeur System",
                "first_name": "D√©veloppeur",
                "last_name": "System",
                "role_id": 5,  # ID du r√¥le developer
                "agency_id": None,
                "balance": 0.0,
                "is_active": True
            }
            
            # Essayer d'ins√©rer le profil
            result = self.supabase.table('profiles').insert(developer_profile).execute()
            
            if result.data:
                print(f"‚úÖ Profil d√©veloppeur cr√©√©: {developer_profile['email']}")
                self.created_users.append({
                    "id": developer_profile['id'],
                    "email": developer_profile['email'],
                    "name": developer_profile['name']
                })
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du d√©veloppeur: {e}")
    
    def create_operation_types(self):
        """Cr√©e les types d'op√©rations"""
        print("üí≥ Cr√©ation des types d'op√©rations...")
        
        operation_types = [
            {
                "name": "D√©p√¥t Orange Money",
                "description": "D√©p√¥t d'argent sur compte Orange Money", 
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Retrait MTN MoMo",
                "description": "Retrait d'argent depuis compte MTN Mobile Money",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Paiement Facture ENEO",
                "description": "Paiement facture √©lectricit√© ENEO",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Paiement Abonnement Canal+",
                "description": "Paiement abonnement t√©l√©vision Canal+",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Enregistrement KYC Client",
                "description": "Enregistrement et v√©rification identit√© client",
                "impacts_balance": False,
                "is_active": True,
                "status": "active"
            }
        ]
        
        for op_type in operation_types:
            try:
                # V√©rifier si existe d√©j√†
                existing = self.supabase.table('operation_types').select('*').eq('name', op_type['name']).execute()
                
                if not existing.data:
                    result = self.supabase.table('operation_types').insert(op_type).execute()
                    if result.data:
                        print(f"‚úÖ Type d'op√©ration cr√©√©: {op_type['name']}")
                    else:
                        print(f"‚ùå Erreur lors de la cr√©ation du type: {op_type['name']}")
                else:
                    print(f"‚úÖ Type d'op√©ration existe d√©j√†: {op_type['name']}")
                    
            except Exception as e:
                print(f"‚ùå Erreur pour le type d'op√©ration {op_type['name']}: {e}")
    
    def create_sample_operations(self):
        """Cr√©e des op√©rations d'exemple"""
        print("üîÑ Cr√©ation d'op√©rations d'exemple...")
        
        try:
            # R√©cup√©rer les profils agents
            agents = self.supabase.table('profiles').select('*').eq('role_id', 1).execute()  # role_id 1 = agent
            
            # R√©cup√©rer les types d'op√©rations
            op_types = self.supabase.table('operation_types').select('*').execute()
            
            # R√©cup√©rer les agences
            agencies = self.supabase.table('agencies').select('*').execute()
            
            if not agents.data or not op_types.data or not agencies.data:
                print("‚ùå Donn√©es insuffisantes pour cr√©er des op√©rations")
                return
            
            # Cr√©er quelques op√©rations en attente
            for i in range(5):
                agent = random.choice(agents.data)
                op_type = random.choice(op_types.data)
                
                operation = {
                    "operation_type_id": op_type['id'],
                    "reference_number": f"OP{datetime.now().strftime('%Y%m%d%H%M%S')}{i:03d}",
                    "initiator_id": agent['id'],
                    "agency_id": agent['agency_id'],
                    "amount": random.uniform(5000, 50000),
                    "currency": "XOF",
                    "status": "pending",
                    "operation_data": {
                        "phone_number": self.generate_phone(),
                        "amount": random.uniform(5000, 50000)
                    }
                }
                
                try:
                    result = self.supabase.table('operations').insert(operation).execute()
                    if result.data:
                        print(f"‚úÖ Op√©ration cr√©√©e: {operation['reference_number']}")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de la cr√©ation de l'op√©ration: {e}")
                    
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des op√©rations: {e}")
    
    def generate_report(self):
        """G√©n√®re un rapport des donn√©es cr√©√©es"""
        print("\n" + "="*60)
        print("üìã RAPPORT DE G√âN√âRATION - VERSION SIMPLIFI√âE")
        print("="*60)
        
        try:
            # Compter les profils
            profiles = self.supabase.table('profiles').select('*, roles(name)').execute()
            
            role_counts = {}
            for profile in profiles.data:
                role_name = profile.get('roles', {}).get('name', 'unknown') if profile.get('roles') else 'unknown'
                role_counts[role_name] = role_counts.get(role_name, 0) + 1
            
            print(f"üë• UTILISATEURS CR√â√âS:")
            for role, count in role_counts.items():
                print(f"   ‚Ä¢ {role}: {count}")
            
            # Compter les agences
            agencies = self.supabase.table('agencies').select('*').execute()
            print(f"\nüè¢ AGENCES: {len(agencies.data)}")
            
            # Compter les types d'op√©rations
            op_types = self.supabase.table('operation_types').select('*').execute()
            print(f"\nüí≥ TYPES D'OP√âRATIONS: {len(op_types.data)}")
            
            # Compter les op√©rations
            operations = self.supabase.table('operations').select('*').execute()
            print(f"\nüîÑ OP√âRATIONS: {len(operations.data)}")
            
            print(f"\nüìß COMPTES DE CONNEXION:")
            print(f"   ‚Ä¢ admin.general@transflow.com / Demo123!")
            print(f"   ‚Ä¢ sous.admin@transflow.com / Demo123!")
            print(f"   ‚Ä¢ developer@transflow.com / Demo123!")
            print(f"   ‚Ä¢ chef.douala@transflow.com / Demo123!")
            print(f"   ‚Ä¢ chef.yaound√©@transflow.com / Demo123!")
            print(f"   ‚Ä¢ agent1.douala@transflow.com / Demo123!")
            print(f"   ‚Ä¢ ... (tous avec mot de passe: Demo123!)")
            
            print(f"\n‚úÖ G√âN√âRATION SIMPLIFI√âE TERMIN√âE!")
            print("="*60)
            
        except Exception as e:
            print(f"‚ùå Erreur lors du rapport: {e}")
    
    def run(self):
        """Lance la g√©n√©ration simplifi√©e"""
        print("üöÄ G√âN√âRATION SIMPLIFI√âE DE DONN√âES MOCK")
        print("="*60)
        
        try:
            # √âtape 1: Cr√©er les agences
            self.create_agencies_direct()
            
            # √âtape 2: Cr√©er les utilisateurs via RPC
            self.create_demo_users_via_rpc()
            
            # √âtape 3: Cr√©er le d√©veloppeur manuellement
            self.create_developer_manual()
            
            # √âtape 4: Cr√©er les types d'op√©rations
            self.create_operation_types()
            
            # √âtape 5: Cr√©er quelques op√©rations d'exemple
            self.create_sample_operations()
            
            # √âtape 6: G√©n√©rer le rapport
            self.generate_report()
            
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE: {e}")
            import traceback
            traceback.print_exc()

if __name__ == "__main__":
    generator = SimpleDataGenerator()
    generator.run()