#!/usr/bin/env python3
"""
Correction d'urgence pour les probl√®mes RLS et d'authentification
"""
import requests
import json
import time

def fix_rls_and_auth():
    supabase_url = "https://khgbnikgsptoflokvtzu.supabase.co"
    anon_key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"
    
    headers = {
        'Content-Type': 'application/json',
        'apikey': anon_key,
        'Prefer': 'return=minimal'
    }
    
    print("üö® CORRECTION D'URGENCE - PROBL√àMES RLS ET AUTHENTIFICATION")
    print("=" * 60)
    
    # 1. V√©rifier si les r√¥les sont accessibles
    print("\nüîç 1. Test d'acc√®s √† la table roles...")
    try:
        response = requests.get(f"{supabase_url}/rest/v1/roles?select=id,name&limit=1", headers=headers)
        if response.status_code == 200:
            print("‚úÖ Table roles accessible")
            roles = response.json()
            print(f"   R√¥les trouv√©s: {len(roles)}")
        else:
            print(f"‚ùå Erreur d'acc√®s √† la table roles: {response.status_code}")
            print(f"   Message: {response.text}")
            
            # Tenter d'ins√©rer les r√¥les de base directement
            print("\nüîß 2. Tentative d'insertion des r√¥les de base...")
            base_roles = [
                {"id": 1, "name": "agent", "label": "Agent Commercial"},
                {"id": 2, "name": "chef_agence", "label": "Chef d'Agence"},
                {"id": 3, "name": "admin_general", "label": "Administrateur G√©n√©ral"},
                {"id": 4, "name": "sous_admin", "label": "Sous-Administrateur"},
                {"id": 5, "name": "developer", "label": "D√©veloppeur"}
            ]
            
            for role in base_roles:
                try:
                    role_response = requests.post(
                        f"{supabase_url}/rest/v1/roles",
                        headers=headers,
                        json=role
                    )
                    if role_response.status_code in [200, 201, 409]:  # 409 = conflit (d√©j√† existe)
                        print(f"   ‚úÖ R√¥le {role['name']}: OK")
                    else:
                        print(f"   ‚ùå R√¥le {role['name']}: Erreur {role_response.status_code}")
                except:
                    print(f"   ‚ö†Ô∏è R√¥le {role['name']}: Exception")
            
    except Exception as e:
        print(f"‚ùå Exception lors du test: {str(e)}")
    
    # 3. Tenter de cr√©er les comptes avec une approche simplifi√©e
    print("\nüîß 3. Cr√©ation simplifi√©e des comptes de d√©monstration...")
    
    demo_accounts = [
        {"email": "admin@transflow.com", "password": "admin123", "name": "Admin G√©n√©ral"},
        {"email": "chef@transflow.com", "password": "chef123", "name": "Chef Agence"},
        {"email": "agent@transflow.com", "password": "agent123", "name": "Agent Commercial"},
        {"email": "dev@transflow.com", "password": "dev123", "name": "D√©veloppeur"}
    ]
    
    for account in demo_accounts:
        print(f"\n   üìù Traitement: {account['email']}")
        
        # Cr√©er le compte
        signup_data = {
            "email": account['email'],
            "password": account['password'],
            "options": {
                "data": {
                    "name": account['name']
                }
            }
        }
        
        try:
            response = requests.post(
                f"{supabase_url}/auth/v1/signup",
                headers=headers,
                json=signup_data
            )
            
            if response.status_code == 200:
                print(f"      ‚úÖ Compte cr√©√© avec succ√®s")
            elif response.status_code == 422:
                error_data = response.json()
                if 'already registered' in error_data.get('msg', '').lower():
                    print(f"      ‚ÑπÔ∏è Compte existe d√©j√†")
                else:
                    print(f"      ‚ùå Erreur 422: {error_data}")
            else:
                print(f"      ‚ùå Erreur {response.status_code}: {response.text}")
                
        except Exception as e:
            print(f"      ‚ùå Exception: {str(e)}")
    
    # 4. Test final
    print("\nüß™ 4. Test final d'authentification...")
    test_account = {"email": "admin@transflow.com", "password": "admin123"}
    
    auth_data = {
        "email": test_account['email'],
        "password": test_account['password']
    }
    
    try:
        response = requests.post(
            f"{supabase_url}/auth/v1/token?grant_type=password",
            headers=headers,
            json=auth_data
        )
        
        if response.status_code == 200:
            print("‚úÖ SUCC√àS: Authentification fonctionne!")
            token_data = response.json()
            print(f"   User ID: {token_data.get('user', {}).get('id', 'N/A')}")
        else:
            error_data = response.json()
            error_code = error_data.get('error_code', 'unknown')
            print(f"‚ùå √âchec authentification: {error_code}")
            if error_code == 'email_not_confirmed':
                print("   üí° Solution: Confirmer l'email via Supabase Dashboard")
            
    except Exception as e:
        print(f"‚ùå Exception lors du test: {str(e)}")
    
    print("\n" + "=" * 60)
    print("üìã R√âSUM√â DE LA CORRECTION:")
    print("- Le probl√®me principal est la r√©cursion RLS sur la table 'roles'")
    print("- Solution imm√©diate n√©cessaire: D√©sactiver RLS sur 'roles' via Supabase Dashboard")
    print("- Ou appliquer le script SQL fix_rls_recursion.sql")
    print("- Une fois corrig√©, les comptes pourront √™tre cr√©√©s et confirm√©s")

if __name__ == "__main__":
    fix_rls_and_auth()