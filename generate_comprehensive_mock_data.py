#!/usr/bin/env python3
"""
Script de g√©n√©ration de donn√©es mock compl√®tes pour TransFlow Nexus
G√©n√®re des comptes de d√©monstration et des donn√©es fictives pour tous les cas d'usage
"""

import os
import json
import uuid
from datetime import datetime, timedelta
from typing import Dict, List, Any
import random
from supabase import create_client, Client
from dataclasses import dataclass
import argparse

# Configuration Supabase
SUPABASE_URL = "https://khgbnikgsptoflokvtzu.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"

# Configuration pour les noms r√©alistes
FIRST_NAMES = [
    "Ahmed", "Aminata", "Ousmane", "Fatou", "Mamadou", "Aissatou", 
    "Ibrahim", "Maryam", "Moussa", "Khadija", "Alassane", "Bineta",
    "Seydou", "Ramata", "Bakary", "Ndeye", "Cheikh", "Adama"
]

LAST_NAMES = [
    "Diallo", "Traor√©", "Ciss√©", "Kone", "Camara", "Tour√©", 
    "Bah", "Sow", "Barry", "Bald√©", "Keita", "Fofana",
    "Diakit√©", "Sanogo", "Coulibaly", "Doumbia", "Kanoute", "Sidib√©"
]

CITIES = ["Douala", "Yaound√©", "Bamako", "Abidjan", "Dakar", "Conakry"]

@dataclass
class UserProfile:
    """Profil utilisateur avec toutes les informations n√©cessaires"""
    id: str
    email: str
    password: str
    name: str
    first_name: str
    last_name: str
    role: str
    role_id: int
    agency_id: int = None
    phone: str = None
    balance: float = 0.0

class MockDataGenerator:
    """G√©n√©rateur de donn√©es mock pour TransFlow Nexus"""
    
    def __init__(self, supabase_url: str, supabase_key: str):
        self.supabase: Client = create_client(supabase_url, supabase_key)
        self.users: List[UserProfile] = []
        self.agencies: List[Dict] = []
        self.operation_types: List[Dict] = []
        self.operations: List[Dict] = []
        self.roles: Dict[str, int] = {}
        
    def generate_phone(self) -> str:
        """G√©n√®re un num√©ro de t√©l√©phone r√©aliste"""
        prefixes = ["77", "78", "70", "76", "75"]
        return f"+221{random.choice(prefixes)}{random.randint(1000000, 9999999)}"
    
    def generate_reference_number(self, prefix: str) -> str:
        """G√©n√®re un num√©ro de r√©f√©rence unique"""
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        return f"{prefix}{timestamp}{random.randint(100, 999)}"
    
    def setup_roles(self):
        """Configure les r√¥les de base"""
        print("üîß Configuration des r√¥les...")
        
        roles_data = [
            {"name": "admin_general", "label": "Administrateur G√©n√©ral"},
            {"name": "sous_admin", "label": "Sous-Administrateur"},
            {"name": "chef_agence", "label": "Chef d'Agence"},
            {"name": "agent", "label": "Agent"},
            {"name": "developer", "label": "D√©veloppeur"}
        ]
        
        for role_data in roles_data:
            try:
                # V√©rifier si le r√¥le existe d√©j√†
                existing = self.supabase.table('roles').select('*').eq('name', role_data['name']).execute()
                
                if not existing.data:
                    result = self.supabase.table('roles').insert(role_data).execute()
                    self.roles[role_data['name']] = result.data[0]['id']
                else:
                    self.roles[role_data['name']] = existing.data[0]['id']
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du r√¥le {role_data['name']}: {e}")
                
        print(f"‚úÖ R√¥les configur√©s: {self.roles}")
    
    def create_agencies(self):
        """Cr√©e les agences de d√©monstration"""
        print("üè¢ Cr√©ation des agences...")
        
        agencies_data = [
            {
                "name": "Agence de Douala",
                "city": "Douala",
                "is_active": True,
                "chef_agence_id": None  # Sera mis √† jour apr√®s cr√©ation des chefs
            },
            {
                "name": "Agence de Yaound√©", 
                "city": "Yaound√©",
                "is_active": True,
                "chef_agence_id": None
            }
        ]
        
        for agency_data in agencies_data:
            try:
                # V√©rifier si l'agence existe d√©j√†
                existing = self.supabase.table('agencies').select('*').eq('name', agency_data['name']).execute()
                
                if not existing.data:
                    result = self.supabase.table('agencies').insert(agency_data).execute()
                    self.agencies.append(result.data[0])
                else:
                    self.agencies.append(existing.data[0])
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation de l'agence {agency_data['name']}: {e}")
                
        print(f"‚úÖ {len(self.agencies)} agences cr√©√©es")
    
    def create_operation_types(self):
        """Cr√©e les types d'op√©rations financi√®res r√©alistes"""
        print("üí≥ Cr√©ation des types d'op√©rations...")
        
        operation_types_data = [
            {
                "name": "D√©p√¥t Orange Money",
                "description": "D√©p√¥t d'argent sur compte Orange Money",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Retrait MTN MoMo",
                "description": "Retrait d'argent depuis compte MTN Mobile Money",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Paiement Facture ENEO",
                "description": "Paiement facture √©lectricit√© ENEO",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Paiement Abonnement Canal+",
                "description": "Paiement abonnement t√©l√©vision Canal+",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Enregistrement KYC Client",
                "description": "Enregistrement et v√©rification identit√© client",
                "impacts_balance": False,
                "is_active": True,
                "status": "active"
            },
            {
                "name": "Transfert Western Union",
                "description": "Envoi d'argent via Western Union",
                "impacts_balance": True,
                "is_active": True,
                "status": "active"
            }
        ]
        
        for op_type_data in operation_types_data:
            try:
                # V√©rifier si le type existe d√©j√†
                existing = self.supabase.table('operation_types').select('*').eq('name', op_type_data['name']).execute()
                
                if not existing.data:
                    result = self.supabase.table('operation_types').insert(op_type_data).execute()
                    self.operation_types.append(result.data[0])
                else:
                    self.operation_types.append(existing.data[0])
                    
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du type d'op√©ration {op_type_data['name']}: {e}")
        
        print(f"‚úÖ {len(self.operation_types)} types d'op√©rations cr√©√©s")
        
        # Cr√©er les champs pour les types d'op√©rations
        self.create_operation_type_fields()
    
    def create_operation_type_fields(self):
        """Cr√©e les champs dynamiques pour les types d'op√©rations"""
        print("üìù Cr√©ation des champs des types d'op√©rations...")
        
        fields_data = []
        
        for op_type in self.operation_types:
            op_type_id = op_type['id']
            
            if "Orange Money" in op_type['name']:
                fields_data.extend([
                    {
                        "operation_type_id": op_type_id,
                        "name": "phone_number",
                        "label": "Num√©ro de t√©l√©phone",
                        "field_type": "tel",
                        "is_required": True,
                        "display_order": 1,
                        "placeholder": "77 123 45 67"
                    },
                    {
                        "operation_type_id": op_type_id,
                        "name": "amount",
                        "label": "Montant",
                        "field_type": "number",
                        "is_required": True,
                        "display_order": 2,
                        "placeholder": "10000"
                    }
                ])
            elif "MTN MoMo" in op_type['name']:
                fields_data.extend([
                    {
                        "operation_type_id": op_type_id,
                        "name": "phone_number",
                        "label": "Num√©ro MTN",
                        "field_type": "tel",
                        "is_required": True,
                        "display_order": 1,
                        "placeholder": "70 123 45 67"
                    },
                    {
                        "operation_type_id": op_type_id,
                        "name": "amount",
                        "label": "Montant",
                        "field_type": "number",
                        "is_required": True,
                        "display_order": 2,
                        "placeholder": "5000"
                    }
                ])
            elif "ENEO" in op_type['name']:
                fields_data.extend([
                    {
                        "operation_type_id": op_type_id,
                        "name": "meter_number",
                        "label": "Num√©ro compteur",
                        "field_type": "text",
                        "is_required": True,
                        "display_order": 1,
                        "placeholder": "12345678"
                    },
                    {
                        "operation_type_id": op_type_id,
                        "name": "amount",
                        "label": "Montant",
                        "field_type": "number",
                        "is_required": True,
                        "display_order": 2,
                        "placeholder": "25000"
                    }
                ])
            elif "Canal+" in op_type['name']:
                fields_data.extend([
                    {
                        "operation_type_id": op_type_id,
                        "name": "decoder_number",
                        "label": "Num√©ro d√©codeur",
                        "field_type": "text",
                        "is_required": True,
                        "display_order": 1,
                        "placeholder": "01234567890"
                    },
                    {
                        "operation_type_id": op_type_id,
                        "name": "package_type",
                        "label": "Type d'abonnement",
                        "field_type": "select",
                        "is_required": True,
                        "display_order": 2,
                        "options": ["Essentiel", "Evasion", "Tout Canal+"]
                    }
                ])
            elif "KYC" in op_type['name']:
                fields_data.extend([
                    {
                        "operation_type_id": op_type_id,
                        "name": "client_name",
                        "label": "Nom complet du client",
                        "field_type": "text",
                        "is_required": True,
                        "display_order": 1,
                        "placeholder": "Nom Prenom"
                    },
                    {
                        "operation_type_id": op_type_id,
                        "name": "id_number",
                        "label": "Num√©ro carte identit√©",
                        "field_type": "text",
                        "is_required": True,
                        "display_order": 2,
                        "placeholder": "1234567890123"
                    }
                ])
        
        # Ins√©rer les champs
        for field_data in fields_data:
            try:
                self.supabase.table('operation_type_fields').insert(field_data).execute()
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du champ {field_data['name']}: {e}")
        
        print(f"‚úÖ {len(fields_data)} champs cr√©√©s pour les types d'op√©rations")
    
    def create_demo_users(self):
        """Cr√©e les comptes de d√©monstration"""
        print("üë• Cr√©ation des comptes utilisateurs...")
        
        users_config = [
            # Admin g√©n√©ral
            {
                "role": "admin_general",
                "count": 1,
                "base_balance": 0.0
            },
            # Sous-admin
            {
                "role": "sous_admin", 
                "count": 1,
                "base_balance": 0.0
            },
            # Developer
            {
                "role": "developer",
                "count": 1,
                "base_balance": 0.0
            },
            # Chefs d'agence (1 par agence)
            {
                "role": "chef_agence",
                "count": 2,
                "base_balance": 50000.0
            },
            # Agents (4-5 par agence)
            {
                "role": "agent",
                "count": 9,
                "base_balance": 25000.0
            }
        ]
        
        agency_index = 0
        chef_created = 0
        agent_created = 0
        
        for user_config in users_config:
            role = user_config["role"]
            count = user_config["count"]
            base_balance = user_config["base_balance"]
            
            for i in range(count):
                # G√©n√©ration des informations utilisateur
                first_name = random.choice(FIRST_NAMES)
                last_name = random.choice(LAST_NAMES)
                name = f"{first_name} {last_name}"
                
                # Email bas√© sur le r√¥le
                if role == "admin_general":
                    email = f"admin.general@transflow.com"
                elif role == "sous_admin":
                    email = f"sous.admin@transflow.com"
                elif role == "developer":
                    email = f"developer@transflow.com"
                elif role == "chef_agence":
                    if chef_created < len(self.agencies):
                        city = self.agencies[chef_created]['city'].lower()
                        email = f"chef.{city}@transflow.com"
                    else:
                        email = f"chef{chef_created + 1}@transflow.com"
                else:  # agent
                    agency_idx = agent_created % len(self.agencies)
                    if agency_idx < len(self.agencies):
                        city = self.agencies[agency_idx]['city'].lower()
                        email = f"agent{agent_created + 1}.{city}@transflow.com"
                    else:
                        email = f"agent{agent_created + 1}@transflow.com"
                
                # Mot de passe par d√©faut
                password = "Demo123!"
                
                # Assignation d'agence
                agency_id = None
                if role in ["chef_agence", "agent"]:
                    if role == "chef_agence":
                        agency_id = self.agencies[chef_created]['id']
                    else:
                        agency_id = self.agencies[agent_created % len(self.agencies)]['id']
                
                # Balance avec variation
                balance = base_balance + random.uniform(-5000, 5000) if base_balance > 0 else 0.0
                
                user_profile = UserProfile(
                    id=str(uuid.uuid4()),
                    email=email,
                    password=password,
                    name=name,
                    first_name=first_name,
                    last_name=last_name,
                    role=role,
                    role_id=self.roles[role],
                    agency_id=agency_id,
                    phone=self.generate_phone(),
                    balance=max(0, balance)
                )
                
                self.users.append(user_profile)
                
                # Incr√©menter les compteurs
                if role == "chef_agence":
                    chef_created += 1
                elif role == "agent":
                    agent_created += 1
        
        print(f"‚úÖ {len(self.users)} profils utilisateur g√©n√©r√©s")
        
        # Cr√©er les comptes et profils
        self.create_auth_accounts()
        self.create_user_profiles()
        
        # Mettre √† jour les chefs d'agence
        self.update_agency_chiefs()
    
    def create_auth_accounts(self):
        """Cr√©e les comptes d'authentification Supabase"""
        print("üîê Cr√©ation des comptes d'authentification...")
        
        for user in self.users:
            try:
                # Cr√©er le compte via l'API admin
                auth_response = self.supabase.auth.admin.create_user({
                    "email": user.email,
                    "password": user.password,
                    "user_metadata": {
                        "name": user.name,
                        "role": user.role
                    },
                    "email_confirm": True
                })
                
                if auth_response.user:
                    user.id = auth_response.user.id
                    print(f"‚úÖ Compte cr√©√© pour {user.email}")
                else:
                    print(f"‚ùå Erreur lors de la cr√©ation du compte pour {user.email}")
                    
            except Exception as e:
                print(f"‚ùå Erreur auth pour {user.email}: {e}")
                # Essayer de r√©cup√©rer l'utilisateur existant
                try:
                    existing_users = self.supabase.auth.admin.list_users()
                    for existing_user in existing_users:
                        if existing_user.email == user.email:
                            user.id = existing_user.id
                            break
                except Exception as e2:
                    print(f"‚ùå Impossible de r√©cup√©rer l'utilisateur existant: {e2}")
    
    def create_user_profiles(self):
        """Cr√©e les profils utilisateur"""
        print("üìã Cr√©ation des profils utilisateur...")
        
        for user in self.users:
            if not user.id:
                continue
                
            profile_data = {
                "id": user.id,
                "email": user.email,
                "name": user.name,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "phone": user.phone,
                "role_id": user.role_id,
                "agency_id": user.agency_id,
                "balance": user.balance,
                "is_active": True
            }
            
            try:
                # V√©rifier si le profil existe
                existing = self.supabase.table('profiles').select('*').eq('id', user.id).execute()
                
                if not existing.data:
                    self.supabase.table('profiles').insert(profile_data).execute()
                else:
                    self.supabase.table('profiles').update(profile_data).eq('id', user.id).execute()
                    
                print(f"‚úÖ Profil cr√©√© pour {user.name} ({user.role})")
                
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du profil pour {user.name}: {e}")
    
    def update_agency_chiefs(self):
        """Met √† jour les chefs d'agence dans la table agencies"""
        print("üè¢ Mise √† jour des chefs d'agence...")
        
        chef_users = [u for u in self.users if u.role == "chef_agence"]
        
        for i, agency in enumerate(self.agencies):
            if i < len(chef_users):
                chef_user = chef_users[i]
                try:
                    self.supabase.table('agencies').update({
                        "chef_agence_id": chef_user.id
                    }).eq('id', agency['id']).execute()
                    
                    print(f"‚úÖ Chef {chef_user.name} assign√© √† {agency['name']}")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lors de l'assignation du chef: {e}")
    
    def create_commission_rules(self):
        """Cr√©e les r√®gles de commission"""
        print("üí∞ Cr√©ation des r√®gles de commission...")
        
        for op_type in self.operation_types:
            if op_type['impacts_balance']:
                commission_data = {
                    "operation_type_id": op_type['id'],
                    "commission_type": "percentage",
                    "percentage_rate": random.uniform(0.01, 0.05),  # 1% √† 5%
                    "min_amount": 100.0,
                    "max_amount": 5000.0,
                    "is_active": True
                }
                
                try:
                    self.supabase.table('commission_rules').insert(commission_data).execute()
                    print(f"‚úÖ R√®gle de commission cr√©√©e pour {op_type['name']}")
                except Exception as e:
                    print(f"‚ùå Erreur lors de la cr√©ation de la r√®gle de commission: {e}")
    
    def create_operations(self):
        """Cr√©e les op√©rations de test avec diff√©rents statuts"""
        print("üîÑ Cr√©ation des op√©rations...")
        
        # R√©cup√©rer les agents et chefs d'agence
        agents = [u for u in self.users if u.role == "agent"]
        chefs = [u for u in self.users if u.role == "chef_agence"]
        admins = [u for u in self.users if u.role in ["admin_general", "sous_admin"]]
        
        # R√©cup√©rer les r√®gles de commission
        commission_rules = self.supabase.table('commission_rules').select('*').execute()
        
        operations_data = []
        
        # Op√©rations en attente (15-20)
        for i in range(18):
            agent = random.choice(agents)
            op_type = random.choice(self.operation_types)
            
            amount = random.uniform(5000, 50000)
            
            # Donn√©es d'op√©ration selon le type
            operation_data = {}
            if "Orange Money" in op_type['name']:
                operation_data = {
                    "phone_number": self.generate_phone(),
                    "amount": amount
                }
            elif "MTN MoMo" in op_type['name']:
                operation_data = {
                    "phone_number": self.generate_phone(),
                    "amount": amount
                }
            elif "ENEO" in op_type['name']:
                operation_data = {
                    "meter_number": f"{random.randint(10000000, 99999999)}",
                    "amount": amount
                }
            elif "Canal+" in op_type['name']:
                operation_data = {
                    "decoder_number": f"{random.randint(10000000000, 99999999999)}",
                    "package_type": random.choice(["Essentiel", "Evasion", "Tout Canal+"])
                }
                amount = random.choice([8000, 15000, 25000])  # Prix fixes
            elif "KYC" in op_type['name']:
                operation_data = {
                    "client_name": f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}",
                    "id_number": f"{random.randint(1000000000000, 9999999999999)}"
                }
                amount = 0  # Pas de montant pour KYC
            
            operation = {
                "operation_type_id": op_type['id'],
                "reference_number": self.generate_reference_number("OP"),
                "initiator_id": agent.id,
                "agency_id": agent.agency_id,
                "amount": amount,
                "currency": "XOF",
                "status": "pending",
                "operation_data": operation_data,
                "created_at": (datetime.now() - timedelta(days=random.randint(0, 7))).isoformat()
            }
            operations_data.append(operation)
        
        # Op√©rations compl√©t√©es (40-50)
        for i in range(45):
            agent = random.choice(agents)
            op_type = random.choice(self.operation_types)
            validator = random.choice(admins)
            
            amount = random.uniform(5000, 50000)
            
            # Donn√©es d'op√©ration selon le type
            operation_data = {}
            if "Orange Money" in op_type['name']:
                operation_data = {
                    "phone_number": self.generate_phone(),
                    "amount": amount
                }
            elif "MTN MoMo" in op_type['name']:
                operation_data = {
                    "phone_number": self.generate_phone(),
                    "amount": amount
                }
            elif "ENEO" in op_type['name']:
                operation_data = {
                    "meter_number": f"{random.randint(10000000, 99999999)}",
                    "amount": amount
                }
            elif "Canal+" in op_type['name']:
                operation_data = {
                    "decoder_number": f"{random.randint(10000000000, 99999999999)}",
                    "package_type": random.choice(["Essentiel", "Evasion", "Tout Canal+"])
                }
                amount = random.choice([8000, 15000, 25000])
            elif "KYC" in op_type['name']:
                operation_data = {
                    "client_name": f"{random.choice(FIRST_NAMES)} {random.choice(LAST_NAMES)}",
                    "id_number": f"{random.randint(1000000000000, 9999999999999)}"
                }
                amount = 0
            
            created_date = datetime.now() - timedelta(days=random.randint(1, 30))
            completed_date = created_date + timedelta(hours=random.randint(1, 48))
            
            operation = {
                "operation_type_id": op_type['id'],
                "reference_number": self.generate_reference_number("OP"),
                "initiator_id": agent.id,
                "agency_id": agent.agency_id,
                "amount": amount,
                "currency": "XOF",
                "status": "completed",
                "operation_data": operation_data,
                "validator_id": validator.id,
                "validated_at": completed_date.isoformat(),
                "completed_at": completed_date.isoformat(),
                "created_at": created_date.isoformat()
            }
            operations_data.append(operation)
        
        # Op√©rations √©chou√©es/rejet√©es (8-10)
        error_messages = [
            "Preuve de paiement illisible",
            "Informations du b√©n√©ficiaire incorrectes",
            "Montant insuffisant sur le compte",
            "Num√©ro de t√©l√©phone invalide",
            "Compteur ENEO non trouv√©",
            "D√©codeur Canal+ inactif"
        ]
        
        for i in range(9):
            agent = random.choice(agents)
            op_type = random.choice(self.operation_types)
            validator = random.choice(admins)
            
            amount = random.uniform(5000, 50000)
            
            operation_data = {
                "phone_number": self.generate_phone(),
                "amount": amount
            }
            
            created_date = datetime.now() - timedelta(days=random.randint(1, 15))
            failed_date = created_date + timedelta(hours=random.randint(1, 24))
            
            operation = {
                "operation_type_id": op_type['id'],
                "reference_number": self.generate_reference_number("OP"),
                "initiator_id": agent.id,
                "agency_id": agent.agency_id,
                "amount": amount,
                "currency": "XOF",
                "status": random.choice(["failed", "cancelled"]),
                "operation_data": operation_data,
                "validator_id": validator.id,
                "validated_at": failed_date.isoformat(),
                "error_message": random.choice(error_messages),
                "created_at": created_date.isoformat()
            }
            operations_data.append(operation)
        
        # Ins√©rer les op√©rations
        batch_size = 10
        for i in range(0, len(operations_data), batch_size):
            batch = operations_data[i:i+batch_size]
            try:
                result = self.supabase.table('operations').insert(batch).execute()
                if result.data:
                    self.operations.extend(result.data)
                print(f"‚úÖ Batch d'op√©rations {i//batch_size + 1} cr√©√© ({len(batch)} op√©rations)")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du batch d'op√©rations: {e}")
        
        print(f"‚úÖ {len(self.operations)} op√©rations cr√©√©es au total")
    
    def create_transaction_ledger(self):
        """Cr√©e les entr√©es du journal des transactions"""
        print("üìä Cr√©ation du journal des transactions...")
        
        ledger_entries = []
        
        for operation in self.operations:
            if operation['status'] == 'completed' and operation['amount'] > 0:
                # R√©cup√©rer l'agent
                agent = next((u for u in self.users if u.id == operation['initiator_id']), None)
                if not agent:
                    continue
                
                # Cr√©er une entr√©e de d√©bit pour l'op√©ration
                ledger_entry = {
                    "user_id": agent.id,
                    "operation_id": operation['id'],
                    "transaction_type": "debit",
                    "amount": operation['amount'],
                    "balance_before": agent.balance,
                    "balance_after": agent.balance - operation['amount'],
                    "description": f"Op√©ration {operation['reference_number']}",
                    "metadata": {
                        "operation_type": operation['operation_type_id'],
                        "reference": operation['reference_number']
                    },
                    "created_at": operation['completed_at']
                }
                
                ledger_entries.append(ledger_entry)
                
                # Mettre √† jour le solde de l'agent
                agent.balance = max(0, agent.balance - operation['amount'])
        
        # Ins√©rer les entr√©es par batches
        batch_size = 20
        for i in range(0, len(ledger_entries), batch_size):
            batch = ledger_entries[i:i+batch_size]
            try:
                self.supabase.table('transaction_ledger').insert(batch).execute()
                print(f"‚úÖ Batch de transactions {i//batch_size + 1} cr√©√© ({len(batch)} entr√©es)")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du batch de transactions: {e}")
        
        print(f"‚úÖ {len(ledger_entries)} entr√©es de transaction cr√©√©es")
    
    def create_commission_records(self):
        """Cr√©e les enregistrements de commission"""
        print("üèÜ Cr√©ation des enregistrements de commission...")
        
        # R√©cup√©rer les r√®gles de commission
        commission_rules = self.supabase.table('commission_rules').select('*').execute()
        rules_by_op_type = {rule['operation_type_id']: rule for rule in commission_rules.data}
        
        commission_records = []
        
        for operation in self.operations:
            if operation['status'] == 'completed' and operation['amount'] > 0:
                # R√©cup√©rer l'agent
                agent = next((u for u in self.users if u.id == operation['initiator_id']), None)
                if not agent:
                    continue
                
                # R√©cup√©rer le chef d'agence
                chef = next((u for u in self.users if u.role == "chef_agence" and u.agency_id == agent.agency_id), None)
                
                # R√©cup√©rer la r√®gle de commission
                rule = rules_by_op_type.get(operation['operation_type_id'])
                if not rule:
                    continue
                
                # Calculer les commissions
                total_commission = operation['amount'] * rule['percentage_rate']
                total_commission = min(total_commission, rule['max_amount'])
                total_commission = max(total_commission, rule['min_amount'])
                
                agent_commission = total_commission * 0.7  # 70% pour l'agent
                chef_commission = total_commission * 0.3   # 30% pour le chef
                
                commission_record = {
                    "operation_id": operation['id'],
                    "agent_id": agent.id,
                    "chef_agence_id": chef.id if chef else None,
                    "commission_rule_id": rule['id'],
                    "agent_commission": agent_commission,
                    "chef_commission": chef_commission,
                    "total_commission": total_commission,
                    "status": "paid",
                    "paid_at": operation['completed_at']
                }
                
                commission_records.append(commission_record)
        
        # Ins√©rer les enregistrements de commission
        batch_size = 20
        for i in range(0, len(commission_records), batch_size):
            batch = commission_records[i:i+batch_size]
            try:
                self.supabase.table('commission_records').insert(batch).execute()
                print(f"‚úÖ Batch de commissions {i//batch_size + 1} cr√©√© ({len(batch)} enregistrements)")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du batch de commissions: {e}")
        
        print(f"‚úÖ {len(commission_records)} enregistrements de commission cr√©√©s")
    
    def create_recharge_tickets(self):
        """Cr√©e les tickets de recharge"""
        print("üé´ Cr√©ation des tickets de recharge...")
        
        agents = [u for u in self.users if u.role == "agent"]
        chefs = [u for u in self.users if u.role == "chef_agence"]
        admin = next((u for u in self.users if u.role == "admin_general"), None)
        
        tickets_data = []
        
        # Tickets ouverts (2-3)
        for i in range(3):
            agent = random.choice(agents)
            chef = next((u for u in chefs if u.agency_id == agent.agency_id), None)
            
            ticket = {
                "ticket_number": self.generate_reference_number("TCK"),
                "requester_id": agent.id,
                "assigned_to_id": chef.id if chef else None,
                "ticket_type": "recharge",
                "priority": random.choice(["medium", "high"]),
                "status": "open",
                "title": f"Demande de recharge - {agent.name}",
                "description": f"Demande de recharge de {random.randint(10000, 50000)} XOF pour poursuivre les op√©rations",
                "requested_amount": random.randint(10000, 50000),
                "created_at": (datetime.now() - timedelta(days=random.randint(0, 3))).isoformat()
            }
            tickets_data.append(ticket)
        
        # Ticket r√©solu (1)
        agent = random.choice(agents)
        resolved_ticket = {
            "ticket_number": self.generate_reference_number("TCK"),
            "requester_id": agent.id,
            "assigned_to_id": admin.id if admin else None,
            "resolved_by_id": admin.id if admin else None,
            "ticket_type": "recharge",
            "priority": "medium",
            "status": "resolved",
            "title": f"Demande de recharge - {agent.name}",
            "description": f"Demande de recharge de 30000 XOF pour poursuivre les op√©rations",
            "requested_amount": 30000,
            "resolution_notes": "Recharge effectu√©e avec succ√®s",
            "created_at": (datetime.now() - timedelta(days=5)).isoformat(),
            "resolved_at": (datetime.now() - timedelta(days=3)).isoformat()
        }
        tickets_data.append(resolved_ticket)
        
        # Ins√©rer les tickets
        for ticket_data in tickets_data:
            try:
                self.supabase.table('request_tickets').insert(ticket_data).execute()
                print(f"‚úÖ Ticket {ticket_data['ticket_number']} cr√©√©")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du ticket: {e}")
        
        print(f"‚úÖ {len(tickets_data)} tickets de recharge cr√©√©s")
    
    def create_notifications(self):
        """Cr√©e des notifications de d√©monstration"""
        print("üîî Cr√©ation des notifications...")
        
        notifications_data = []
        
        # Notifications pour les agents
        agents = [u for u in self.users if u.role == "agent"]
        for agent in agents[:3]:  # Quelques agents
            notifications_data.extend([
                {
                    "recipient_id": agent.id,
                    "notification_type": "operation",
                    "title": "Op√©ration valid√©e",
                    "message": f"Votre op√©ration {self.generate_reference_number('OP')} a √©t√© valid√©e avec succ√®s",
                    "priority": "normal",
                    "is_read": random.choice([True, False]),
                    "created_at": (datetime.now() - timedelta(days=random.randint(0, 7))).isoformat()
                },
                {
                    "recipient_id": agent.id,
                    "notification_type": "commission",
                    "title": "Commission disponible",
                    "message": f"Vous avez re√ßu une commission de {random.randint(1000, 5000)} XOF",
                    "priority": "normal",
                    "is_read": random.choice([True, False]),
                    "created_at": (datetime.now() - timedelta(days=random.randint(0, 5))).isoformat()
                }
            ])
        
        # Notifications pour les chefs d'agence
        chefs = [u for u in self.users if u.role == "chef_agence"]
        for chef in chefs:
            notifications_data.extend([
                {
                    "recipient_id": chef.id,
                    "notification_type": "ticket",
                    "title": "Nouvelle demande de recharge",
                    "message": "Un agent a soumis une demande de recharge",
                    "priority": "high",
                    "is_read": random.choice([True, False]),
                    "created_at": (datetime.now() - timedelta(days=random.randint(0, 3))).isoformat()
                }
            ])
        
        # Notifications pour les admins
        admin = next((u for u in self.users if u.role == "admin_general"), None)
        if admin:
            notifications_data.extend([
                {
                    "recipient_id": admin.id,
                    "notification_type": "system",
                    "title": "Rapport mensuel disponible",
                    "message": "Le rapport mensuel des op√©rations est maintenant disponible",
                    "priority": "normal",
                    "is_read": False,
                    "created_at": (datetime.now() - timedelta(days=1)).isoformat()
                },
                {
                    "recipient_id": admin.id,
                    "notification_type": "validation",
                    "title": "Op√©rations en attente",
                    "message": f"Il y a {len([op for op in self.operations if op['status'] == 'pending'])} op√©rations en attente de validation",
                    "priority": "high",
                    "is_read": False,
                    "created_at": datetime.now().isoformat()
                }
            ])
        
        # Ins√©rer les notifications
        batch_size = 10
        for i in range(0, len(notifications_data), batch_size):
            batch = notifications_data[i:i+batch_size]
            try:
                self.supabase.table('notifications').insert(batch).execute()
                print(f"‚úÖ Batch de notifications {i//batch_size + 1} cr√©√© ({len(batch)} notifications)")
            except Exception as e:
                print(f"‚ùå Erreur lors de la cr√©ation du batch de notifications: {e}")
        
        print(f"‚úÖ {len(notifications_data)} notifications cr√©√©es")
    
    def create_system_settings(self):
        """Cr√©e les param√®tres syst√®me"""
        print("‚öôÔ∏è Cr√©ation des param√®tres syst√®me...")
        
        system_config = {
            "app_name": "TransFlow Nexus",
            "app_version": "1.0.0",
            "currency": "XOF",
            "default_commission_rate": 0.025,
            "max_daily_operations": 100,
            "max_operation_amount": 500000,
            "notification_settings": {
                "email_notifications": True,
                "sms_notifications": False,
                "push_notifications": True
            },
            "security_settings": {
                "session_timeout": 3600,
                "max_login_attempts": 5,
                "password_policy": {
                    "min_length": 8,
                    "require_uppercase": True,
                    "require_lowercase": True,
                    "require_numbers": True,
                    "require_symbols": True
                }
            },
            "business_rules": {
                "auto_approve_under": 10000,
                "require_dual_approval_over": 100000,
                "commission_splits": {
                    "agent": 0.7,
                    "chef_agence": 0.3
                }
            }
        }
        
        settings_data = {
            "id": 1,
            "config": system_config,
            "updated_by": "system",
            "updated_at": datetime.now().isoformat()
        }
        
        try:
            # V√©rifier si les param√®tres existent
            existing = self.supabase.table('system_settings').select('*').eq('id', 1).execute()
            
            if not existing.data:
                self.supabase.table('system_settings').insert(settings_data).execute()
            else:
                self.supabase.table('system_settings').update(settings_data).eq('id', 1).execute()
                
            print("‚úÖ Param√®tres syst√®me cr√©√©s/mis √† jour")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation des param√®tres syst√®me: {e}")
    
    def generate_summary_report(self):
        """G√©n√®re un rapport de r√©sum√© des donn√©es cr√©√©es"""
        print("\n" + "="*60)
        print("üìã RAPPORT DE G√âN√âRATION DES DONN√âES MOCK")
        print("="*60)
        
        # Compter les utilisateurs par r√¥le
        user_counts = {}
        for user in self.users:
            user_counts[user.role] = user_counts.get(user.role, 0) + 1
        
        print(f"üë• UTILISATEURS CR√â√âS:")
        for role, count in user_counts.items():
            print(f"   ‚Ä¢ {role}: {count}")
        
        print(f"\nüè¢ AGENCES CR√â√âES: {len(self.agencies)}")
        for agency in self.agencies:
            print(f"   ‚Ä¢ {agency['name']} ({agency['city']})")
        
        print(f"\nüí≥ TYPES D'OP√âRATIONS: {len(self.operation_types)}")
        for op_type in self.operation_types:
            print(f"   ‚Ä¢ {op_type['name']}")
        
        print(f"\nüîÑ OP√âRATIONS CR√â√âES: {len(self.operations)}")
        operation_counts = {}
        for operation in self.operations:
            status = operation['status']
            operation_counts[status] = operation_counts.get(status, 0) + 1
        
        for status, count in operation_counts.items():
            print(f"   ‚Ä¢ {status}: {count}")
        
        print(f"\nüìß COMPTES DE CONNEXION:")
        print(f"   ‚Ä¢ admin.general@transflow.com / Demo123!")
        print(f"   ‚Ä¢ sous.admin@transflow.com / Demo123!")
        print(f"   ‚Ä¢ developer@transflow.com / Demo123!")
        print(f"   ‚Ä¢ chef.douala@transflow.com / Demo123!")
        print(f"   ‚Ä¢ chef.yaound√©@transflow.com / Demo123!")
        print(f"   ‚Ä¢ agent1.douala@transflow.com / Demo123!")
        print(f"   ‚Ä¢ agent2.yaound√©@transflow.com / Demo123!")
        print(f"   ‚Ä¢ ... (tous les comptes utilisent le mot de passe: Demo123!)")
        
        print(f"\n‚úÖ G√âN√âRATION TERMIN√âE AVEC SUCC√àS!")
        print(f"   ‚Ä¢ Base de donn√©es: Supabase")
        print(f"   ‚Ä¢ Donn√©es g√©n√©r√©es: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("="*60)
    
    def run(self):
        """Ex√©cute la g√©n√©ration compl√®te des donn√©es"""
        print("üöÄ D√âMARRAGE DE LA G√âN√âRATION DE DONN√âES MOCK")
        print("="*60)
        
        try:
            # √âtape 1: Configuration des r√¥les
            self.setup_roles()
            
            # √âtape 2: Cr√©ation des agences
            self.create_agencies()
            
            # √âtape 3: Cr√©ation des types d'op√©rations
            self.create_operation_types()
            
            # √âtape 4: Cr√©ation des r√®gles de commission
            self.create_commission_rules()
            
            # √âtape 5: Cr√©ation des utilisateurs
            self.create_demo_users()
            
            # √âtape 6: Cr√©ation des op√©rations
            self.create_operations()
            
            # √âtape 7: Cr√©ation du journal des transactions
            self.create_transaction_ledger()
            
            # √âtape 8: Cr√©ation des enregistrements de commission
            self.create_commission_records()
            
            # √âtape 9: Cr√©ation des tickets de recharge
            self.create_recharge_tickets()
            
            # √âtape 10: Cr√©ation des notifications
            self.create_notifications()
            
            # √âtape 11: Cr√©ation des param√®tres syst√®me
            self.create_system_settings()
            
            # √âtape 12: G√©n√©ration du rapport
            self.generate_summary_report()
            
        except Exception as e:
            print(f"‚ùå ERREUR CRITIQUE: {e}")
            raise

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="G√©n√©rateur de donn√©es mock pour TransFlow Nexus")
    parser.add_argument("--confirm", action="store_true", help="Confirmer la g√©n√©ration des donn√©es")
    
    args = parser.parse_args()
    
    if not args.confirm:
        print("‚ö†Ô∏è  ATTENTION: Ce script va g√©n√©rer des donn√©es de d√©monstration dans Supabase")
        print("   Cela peut modifier ou remplacer des donn√©es existantes.")
        print("   Utiliser --confirm pour proc√©der.")
        return
    
    # Cr√©er le g√©n√©rateur et ex√©cuter
    generator = MockDataGenerator(SUPABASE_URL, SUPABASE_KEY)
    generator.run()

if __name__ == "__main__":
    main()