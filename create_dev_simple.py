#!/usr/bin/env python3
"""
Script pour cr√©er un compte d√©veloppeur via l'admin existant
"""

import os
from supabase import create_client, Client

# Configuration Supabase
SUPABASE_URL = "https://khgbnikgsptoflokvtzu.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"

def create_developer_via_admin():
    """Cr√©e un compte d√©veloppeur en utilisant l'admin"""
    print("üßë‚Äçüíª Cr√©ation du compte d√©veloppeur via admin...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Informations du compte d√©veloppeur
    developer_email = "developer.admin@transflownexus.app"  # Format diff√©rent
    developer_password = "developer2024!"
    developer_name = "D√©veloppeur Admin"
    
    try:
        print(f"üîê Connexion avec admin...")
        
        # Se connecter avec l'admin
        admin_auth = supabase.auth.sign_in_with_password({
            "email": "admin_monel@transflownexus.demo",
            "password": "admin123"
        })
        
        if admin_auth.user:
            print("   ‚úÖ Admin connect√©")
            
            # D√©connecter l'admin et essayer de cr√©er le nouveau compte
            supabase.auth.sign_out()
            
            print(f"üìù Cr√©ation du compte d√©veloppeur...")
            
            # Tentative de cr√©ation avec un email plus simple
            signup_response = supabase.auth.sign_up({
                'email': developer_email,
                'password': developer_password,
                'options': {
                    'data': {
                        'name': developer_name
                    }
                }
            })
            
            if signup_response.user:
                user_id = signup_response.user.id
                print(f"   ‚úÖ Compte auth cr√©√©. User ID: {user_id}")
                
                # Se reconnecter avec l'admin pour cr√©er le profil
                admin_auth2 = supabase.auth.sign_in_with_password({
                    "email": "admin_monel@transflownexus.demo",
                    "password": "admin123"
                })
                
                if admin_auth2.user:
                    print("   ‚úÖ Admin reconnect√© pour cr√©er le profil")
                    
                    # Cr√©er le profil via admin
                    profile_response = supabase.table('profiles').insert({
                        'id': user_id,
                        'email': developer_email,
                        'name': developer_name,
                        'role_id': 5,  # developer
                        'agency_id': None,
                        'is_active': True
                    }).execute()
                    
                    print("   ‚úÖ Profil cr√©√© avec r√¥le developer")
                    
                    # Cr√©er l'entr√©e user_roles
                    user_role_response = supabase.table('user_roles').insert({
                        'user_id': user_id,
                        'role_id': 5,  # developer
                        'agency_id': None,
                        'is_active': True
                    }).execute()
                    
                    print("   ‚úÖ User role assign√©")
                    
                    supabase.auth.sign_out()
                    
                    # Tester la connexion du d√©veloppeur
                    return test_developer_login(developer_email, developer_password)
                else:
                    print("   ‚ùå √âchec reconnexion admin")
                    return False
            else:
                print("   ‚ùå √âchec cr√©ation compte auth")
                return False
        else:
            print("   ‚ùå √âchec connexion admin")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
        # Si l'email n'est pas accept√©, essayons un format encore plus simple
        if "invalid" in str(e).lower():
            return try_simpler_email()
        return False

def try_simpler_email():
    """Essaie avec un email encore plus simple"""
    print("\nüîÑ Tentative avec email plus simple...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Email tr√®s simple
    developer_email = "dev@test.com"
    developer_password = "dev123456"
    developer_name = "D√©veloppeur"
    
    try:
        print(f"üìù Cr√©ation avec {developer_email}...")
        
        signup_response = supabase.auth.sign_up({
            'email': developer_email,
            'password': developer_password,
            'options': {
                'data': {
                    'name': developer_name
                }
            }
        })
        
        if signup_response.user:
            user_id = signup_response.user.id
            print(f"   ‚úÖ Compte cr√©√©! User ID: {user_id}")
            
            # Se connecter avec le nouveau compte pour cr√©er son profil
            dev_auth = supabase.auth.sign_in_with_password({
                "email": developer_email,
                "password": developer_password
            })
            
            if dev_auth.user:
                print("   ‚úÖ Connexion d√©veloppeur r√©ussie")
                
                # Cr√©er son propre profil
                profile_response = supabase.table('profiles').insert({
                    'id': user_id,
                    'email': developer_email,
                    'name': developer_name,
                    'role_id': 5,  # developer
                    'agency_id': None,
                    'is_active': True
                }).execute()
                
                print("   ‚úÖ Profil cr√©√©")
                
                # Cr√©er user_roles (peut √©chouer √† cause des RLS, c'est normal)
                try:
                    user_role_response = supabase.table('user_roles').insert({
                        'user_id': user_id,
                        'role_id': 5,  # developer
                        'agency_id': None,
                        'is_active': True
                    }).execute()
                    print("   ‚úÖ User role cr√©√©")
                except Exception as ur_error:
                    print(f"   ‚ö†Ô∏è  User role pas cr√©√© (normal): {str(ur_error)}")
                
                supabase.auth.sign_out()
                return test_developer_login(developer_email, developer_password)
            else:
                print("   ‚ùå √âchec connexion d√©veloppeur")
                return False
        else:
            print("   ‚ùå √âchec cr√©ation")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur email simple: {str(e)}")
        return False

def test_developer_login(email, password):
    """Test de connexion du d√©veloppeur"""
    print(f"\nüß™ Test de connexion d√©veloppeur {email}...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # Test de connexion
        auth_response = supabase.auth.sign_in_with_password({
            "email": email,
            "password": password
        })
        
        if auth_response.user:
            user_id = auth_response.user.id
            print(f"   ‚úÖ Connexion r√©ussie")
            
            # V√©rifier le r√¥le
            profile_response = supabase.table('profiles').select('*, roles(name, label)').eq('id', user_id).single().execute()
            
            if profile_response.data and profile_response.data.get('roles'):
                role_name = profile_response.data['roles']['name']
                print(f"   ‚úÖ R√¥le trouv√©: {role_name}")
                
                if role_name == "developer":
                    print(f"   ‚úÖ Compte d√©veloppeur fonctionnel!")
                    print(f"\nüîë INFORMATIONS DE CONNEXION:")
                    print(f"   Email: {email}")
                    print(f"   Mot de passe: {password}")
                    print(f"   URL: http://localhost:8080/")
                    print(f"   Dashboard: /dashboard/developer")
                    
                    supabase.auth.sign_out()
                    return True
                else:
                    print(f"   ‚ö†Ô∏è  R√¥le incorrect: {role_name}")
            else:
                print(f"   ‚ùå Pas de r√¥le trouv√©")
            
            supabase.auth.sign_out()
        else:
            print(f"   ‚ùå √âchec connexion test")
            
    except Exception as e:
        print(f"   ‚ùå Erreur test: {str(e)}")
    
    return False

def main():
    print("üöÄ Cr√©ation du compte d√©veloppeur")
    print("="*50)
    
    success = create_developer_via_admin()
    
    print("\n" + "="*50)
    if success:
        print("‚úÖ COMPTE D√âVELOPPEUR CR√â√â AVEC SUCC√àS!")
        print("\nVous pouvez maintenant vous connecter et acc√©der au dashboard d√©veloppeur.")
    else:
        print("‚ùå √âchec de la cr√©ation du compte d√©veloppeur")
        print("Vous pouvez essayer de cr√©er le compte manuellement via le dashboard Supabase.")

if __name__ == "__main__":
    main()