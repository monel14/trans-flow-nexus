-- ===============================================
-- SCRIPT DE V√âRIFICATION DES DONN√âES MOCK
-- TransFlow Nexus - Validation compl√®te
-- ===============================================

-- Ce script v√©rifie que toutes les donn√©es mock ont √©t√© cr√©√©es correctement

-- ===============================================
-- 1. V√âRIFICATION DES R√îLES
-- ===============================================
DO $$
DECLARE
    role_count integer;
BEGIN
    SELECT COUNT(*) INTO role_count FROM public.roles WHERE is_active = true;
    RAISE NOTICE 'üìã R√¥les cr√©√©s: % (attendu: 5)', role_count;
    
    IF role_count >= 5 THEN
        RAISE NOTICE '‚úÖ R√¥les: OK';
    ELSE
        RAISE NOTICE '‚ùå R√¥les: MANQUANTS';
    END IF;
END
$$;

-- ===============================================
-- 2. V√âRIFICATION DES AGENCES
-- ===============================================
DO $$
DECLARE
    agency_count integer;
    total_balance numeric;
BEGIN
    SELECT COUNT(*), COALESCE(SUM(balance), 0) 
    INTO agency_count, total_balance 
    FROM public.agencies WHERE is_active = true;
    
    RAISE NOTICE 'üè¢ Agences cr√©√©es: % (attendu: 4)', agency_count;
    RAISE NOTICE 'üí∞ Balance totale agences: % XOF', total_balance;
    
    IF agency_count >= 4 THEN
        RAISE NOTICE '‚úÖ Agences: OK';
    ELSE
        RAISE NOTICE '‚ùå Agences: MANQUANTES';
    END IF;
END
$$;

-- ===============================================
-- 3. V√âRIFICATION DES TYPES D'OP√âRATIONS
-- ===============================================
DO $$
DECLARE
    operation_type_count integer;
    field_count integer;
BEGIN
    SELECT COUNT(*) INTO operation_type_count 
    FROM public.operation_types WHERE is_active = true;
    
    SELECT COUNT(*) INTO field_count 
    FROM public.operation_type_fields WHERE is_obsolete = false;
    
    RAISE NOTICE 'üîß Types d''op√©rations: % (attendu: 7)', operation_type_count;
    RAISE NOTICE 'üìù Champs configur√©s: % (attendu: 12+)', field_count;
    
    IF operation_type_count >= 7 AND field_count >= 12 THEN
        RAISE NOTICE '‚úÖ Types d''op√©rations: OK';
    ELSE
        RAISE NOTICE '‚ùå Types d''op√©rations: INCOMPLETS';
    END IF;
END
$$;

-- ===============================================
-- 4. V√âRIFICATION DES R√àGLES DE COMMISSION
-- ===============================================
DO $$
DECLARE
    commission_rule_count integer;
BEGIN
    SELECT COUNT(*) INTO commission_rule_count 
    FROM public.commission_rules WHERE is_active = true;
    
    RAISE NOTICE 'üíº R√®gles de commission: % (attendu: 7)', commission_rule_count;
    
    IF commission_rule_count >= 7 THEN
        RAISE NOTICE '‚úÖ R√®gles de commission: OK';
    ELSE
        RAISE NOTICE '‚ùå R√®gles de commission: MANQUANTES';
    END IF;
END
$$;

-- ===============================================
-- 5. V√âRIFICATION DES PROFILS
-- ===============================================
DO $$
DECLARE
    admin_count integer;
    chef_count integer;
    agent_count integer;
    dev_count integer;
BEGIN
    SELECT COUNT(*) INTO admin_count 
    FROM public.profiles p JOIN public.roles r ON p.role_id = r.id 
    WHERE r.name IN ('admin_general', 'sous_admin') AND p.is_active = true;
    
    SELECT COUNT(*) INTO chef_count 
    FROM public.profiles p JOIN public.roles r ON p.role_id = r.id 
    WHERE r.name = 'chef_agence' AND p.is_active = true;
    
    SELECT COUNT(*) INTO agent_count 
    FROM public.profiles p JOIN public.roles r ON p.role_id = r.id 
    WHERE r.name = 'agent' AND p.is_active = true;
    
    SELECT COUNT(*) INTO dev_count 
    FROM public.profiles p JOIN public.roles r ON p.role_id = r.id 
    WHERE r.name = 'developer' AND p.is_active = true;
    
    RAISE NOTICE 'üë• Profils cr√©√©s:';
    RAISE NOTICE '   - Admins: % (attendu: 2)', admin_count;
    RAISE NOTICE '   - Chefs d''agence: % (attendu: 3)', chef_count;
    RAISE NOTICE '   - Agents: % (attendu: 6)', agent_count;
    RAISE NOTICE '   - D√©veloppeurs: % (attendu: 1)', dev_count;
    
    IF admin_count >= 2 AND chef_count >= 3 AND agent_count >= 6 AND dev_count >= 1 THEN
        RAISE NOTICE '‚úÖ Profils: OK';
    ELSE
        RAISE NOTICE '‚ùå Profils: INCOMPLETS';
    END IF;
END
$$;

-- ===============================================
-- 6. V√âRIFICATION DES OP√âRATIONS
-- ===============================================
DO $$
DECLARE
    operation_count integer;
    completed_count integer;
    pending_count integer;
    failed_count integer;
    total_amount numeric;
BEGIN
    SELECT COUNT(*) INTO operation_count FROM public.operations;
    
    SELECT COUNT(*) INTO completed_count 
    FROM public.operations WHERE status = 'completed';
    
    SELECT COUNT(*) INTO pending_count 
    FROM public.operations WHERE status IN ('pending', 'validation_required');
    
    SELECT COUNT(*) INTO failed_count 
    FROM public.operations WHERE status = 'failed';
    
    SELECT COALESCE(SUM(amount), 0) INTO total_amount 
    FROM public.operations WHERE status = 'completed';
    
    RAISE NOTICE 'üìä Op√©rations cr√©√©es: % (attendu: 15+)', operation_count;
    RAISE NOTICE '   - Compl√©t√©es: %', completed_count;
    RAISE NOTICE '   - En attente: %', pending_count;
    RAISE NOTICE '   - √âchou√©es: %', failed_count;
    RAISE NOTICE '   - Montant total trait√©: % XOF', total_amount;
    
    IF operation_count >= 15 THEN
        RAISE NOTICE '‚úÖ Op√©rations: OK';
    ELSE
        RAISE NOTICE '‚ùå Op√©rations: INSUFFISANTES';
    END IF;
END
$$;

-- ===============================================
-- 7. V√âRIFICATION DES COMMISSIONS
-- ===============================================
DO $$
DECLARE
    commission_count integer;
    total_commissions numeric;
    agent_share_total numeric;
    chef_share_total numeric;
    agency_share_total numeric;
BEGIN
    SELECT COUNT(*), COALESCE(SUM(commission_amount), 0),
           COALESCE(SUM(agent_share), 0), COALESCE(SUM(chef_share), 0), COALESCE(SUM(agency_share), 0)
    INTO commission_count, total_commissions, agent_share_total, chef_share_total, agency_share_total
    FROM public.commission_records;
    
    RAISE NOTICE 'üí∞ Commissions g√©n√©r√©es: % enregistrements', commission_count;
    RAISE NOTICE '   - Total commissions: % XOF', total_commissions;
    RAISE NOTICE '   - Part agents: % XOF', agent_share_total;
    RAISE NOTICE '   - Part chefs: % XOF', chef_share_total;
    RAISE NOTICE '   - Part agences: % XOF', agency_share_total;
    
    IF commission_count > 0 THEN
        RAISE NOTICE '‚úÖ Commissions: OK';
    ELSE
        RAISE NOTICE '‚ùå Commissions: MANQUANTES';
    END IF;
END
$$;

-- ===============================================
-- 8. V√âRIFICATION DU LEDGER DE TRANSACTIONS
-- ===============================================
DO $$
DECLARE
    ledger_count integer;
    credit_total numeric;
    debit_total numeric;
BEGIN
    SELECT COUNT(*) INTO ledger_count FROM public.transaction_ledger;
    
    SELECT COALESCE(SUM(amount), 0) INTO credit_total 
    FROM public.transaction_ledger WHERE transaction_type = 'credit';
    
    SELECT COALESCE(SUM(ABS(amount)), 0) INTO debit_total 
    FROM public.transaction_ledger WHERE transaction_type = 'debit';
    
    RAISE NOTICE 'üìî Entr√©es ledger: % (attendu: 10+)', ledger_count;
    RAISE NOTICE '   - Total cr√©dits: % XOF', credit_total;
    RAISE NOTICE '   - Total d√©bits: % XOF', debit_total;
    
    IF ledger_count >= 5 THEN
        RAISE NOTICE '‚úÖ Ledger: OK';
    ELSE
        RAISE NOTICE '‚ùå Ledger: INSUFFISANT';
    END IF;
END
$$;

-- ===============================================
-- 9. V√âRIFICATION DES DEMANDES
-- ===============================================
DO $$
DECLARE
    support_count integer;
    recharge_count integer;
BEGIN
    SELECT COUNT(*) INTO support_count FROM public.support_tickets;
    SELECT COUNT(*) INTO recharge_count FROM public.recharge_requests;
    
    RAISE NOTICE 'üé´ Tickets de support: % (attendu: 4)', support_count;
    RAISE NOTICE 'üîã Demandes de recharge: % (attendu: 3)', recharge_count;
    
    IF support_count >= 4 AND recharge_count >= 3 THEN
        RAISE NOTICE '‚úÖ Demandes: OK';
    ELSE
        RAISE NOTICE '‚ùå Demandes: INSUFFISANTES';
    END IF;
END
$$;

-- ===============================================
-- 10. V√âRIFICATION DES LOGS ET CONFIGURATION
-- ===============================================
DO $$
DECLARE
    error_log_count integer;
    config_count integer;
BEGIN
    SELECT COUNT(*) INTO error_log_count FROM public.error_logs;
    SELECT COUNT(*) INTO config_count FROM public.system_config WHERE is_active = true;
    
    RAISE NOTICE 'üö® Logs d''erreur: % (attendu: 3)', error_log_count;
    RAISE NOTICE '‚öôÔ∏è Configurations: % (attendu: 8)', config_count;
    
    IF error_log_count >= 3 AND config_count >= 8 THEN
        RAISE NOTICE '‚úÖ Logs & Config: OK';
    ELSE
        RAISE NOTICE '‚ùå Logs & Config: INCOMPLETS';
    END IF;
END
$$;

-- ===============================================
-- 11. R√âPARTITION PAR AGENCE
-- ===============================================
DO $$
DECLARE
    rec RECORD;
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üè¢ R√âPARTITION PAR AGENCE:';
    RAISE NOTICE '========================';
    
    FOR rec IN 
        SELECT a.name as agency_name,
               COUNT(DISTINCT p.id) FILTER (WHERE r.name = 'chef_agence') as chefs,
               COUNT(DISTINCT p.id) FILTER (WHERE r.name = 'agent') as agents,
               COUNT(DISTINCT o.id) as operations,
               COALESCE(SUM(o.amount), 0) as volume_operations,
               COALESCE(SUM(cr.commission_amount), 0) as total_commissions
        FROM public.agencies a
        LEFT JOIN public.profiles p ON a.id = p.agency_id
        LEFT JOIN public.roles r ON p.role_id = r.id
        LEFT JOIN public.operations o ON a.id = o.agency_id
        LEFT JOIN public.commission_records cr ON a.id = cr.agency_id
        WHERE a.is_active = true
        GROUP BY a.id, a.name
        ORDER BY a.name
    LOOP
        RAISE NOTICE 'üìç %:', rec.agency_name;
        RAISE NOTICE '   - Chef(s): %, Agents: %', rec.chefs, rec.agents;
        RAISE NOTICE '   - Op√©rations: %, Volume: % XOF', rec.operations, rec.volume_operations;
        RAISE NOTICE '   - Commissions: % XOF', rec.total_commissions;
        RAISE NOTICE '';
    END LOOP;
END
$$;

-- ===============================================
-- 12. R√âSUM√â FINAL
-- ===============================================
DO $$
BEGIN
    RAISE NOTICE '============================================';
    RAISE NOTICE 'üéØ V√âRIFICATION TERMIN√âE';
    RAISE NOTICE '============================================';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã PROCHAINES √âTAPES:';
    RAISE NOTICE '1. Cr√©er les utilisateurs dans Supabase Auth';
    RAISE NOTICE '2. Utiliser le script create_test_users.py ou cr√©er manuellement';
    RAISE NOTICE '3. Tester la connexion avec chaque r√¥le';
    RAISE NOTICE '4. V√©rifier les dashboards et fonctionnalit√©s';
    RAISE NOTICE '';
    RAISE NOTICE 'üîë COMPTES √Ä CR√âER:';
    RAISE NOTICE '- admin@transflownexus.com (Admin)';
    RAISE NOTICE '- chef.dakar@transflownexus.com (Chef Dakar)';
    RAISE NOTICE '- agent1.dakar@transflownexus.com (Agent Dakar)';
    RAISE NOTICE '- ... (voir GUIDE_CREATION_COMPTES_TEST.md)';
    RAISE NOTICE '';
    RAISE NOTICE 'üîê Mot de passe: TransFlow2024!';
    RAISE NOTICE '============================================';
END
$$;