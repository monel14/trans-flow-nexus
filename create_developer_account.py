#!/usr/bin/env python3
"""
Script pour cr√©er un compte d√©veloppeur
"""

import os
from supabase import create_client, Client

# Configuration Supabase
SUPABASE_URL = "https://khgbnikgsptoflokvtzu.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtoZ2JuaWtnc3B0b2Zsb2t2dHp1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDk5NTY5MjEsImV4cCI6MjA2NTUzMjkyMX0.ivvTK10biQNOHd4cAc9zmMDApkm4xMGImEpCVsMzp4M"

def create_developer_account():
    """Cr√©e un compte d√©veloppeur"""
    print("üßë‚Äçüíª Cr√©ation du compte d√©veloppeur...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    # Informations du compte d√©veloppeur
    developer_email = "developer@example.com"
    developer_password = "dev123456"
    developer_name = "D√©veloppeur Admin"
    
    try:
        print(f"üìù Cr√©ation du compte {developer_email}...")
        
        # 1. Cr√©er le compte auth
        signup_response = supabase.auth.sign_up({
            'email': developer_email,
            'password': developer_password,
            'options': {
                'data': {
                    'name': developer_name
                }
            }
        })
        
        if signup_response.user:
            user_id = signup_response.user.id
            print(f"   ‚úÖ Compte auth cr√©√©. User ID: {user_id}")
            
            # 2. Se connecter avec le compte pour cr√©er le profil
            auth_response = supabase.auth.sign_in_with_password({
                "email": developer_email,
                "password": developer_password
            })
            
            if auth_response.user:
                print("   ‚úÖ Connexion r√©ussie")
                
                # 3. Cr√©er le profil (role_id 5 = developer)
                profile_response = supabase.table('profiles').insert({
                    'id': user_id,
                    'email': developer_email,
                    'name': developer_name,
                    'role_id': 5,  # developer
                    'agency_id': None,
                    'is_active': True
                }).execute()
                
                print("   ‚úÖ Profil cr√©√© avec r√¥le developer")
                
                # 4. Cr√©er l'entr√©e user_roles
                user_role_response = supabase.table('user_roles').insert({
                    'user_id': user_id,
                    'role_id': 5,  # developer
                    'agency_id': None,
                    'is_active': True
                }).execute()
                
                print("   ‚úÖ User role assign√©")
                
                supabase.auth.sign_out()
                return True
            else:
                print("   ‚ùå √âchec de connexion apr√®s cr√©ation")
                return False
        else:
            print("   ‚ùå √âchec cr√©ation auth")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur: {str(e)}")
        # Si le compte existe d√©j√†, essayer de le mettre √† jour
        if "User already registered" in str(e):
            print("   ‚ÑπÔ∏è  Compte existe d√©j√†, tentative de mise √† jour...")
            return update_existing_developer_account(developer_email, developer_password, developer_name)
        return False

def update_existing_developer_account(email, password, name):
    """Met √† jour un compte d√©veloppeur existant"""
    print("üîÑ Mise √† jour du compte d√©veloppeur existant...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    try:
        # Se connecter avec le compte
        auth_response = supabase.auth.sign_in_with_password({
            "email": email,
            "password": password
        })
        
        if auth_response.user:
            user_id = auth_response.user.id
            print(f"   ‚úÖ Connexion r√©ussie. User ID: {user_id}")
            
            # V√©rifier si le profil existe
            existing_profile = supabase.table('profiles').select('*').eq('id', user_id).execute()
            
            if len(existing_profile.data) > 0:
                # Mettre √† jour le r√¥le
                update_response = supabase.table('profiles').update({
                    'role_id': 5,  # developer
                    'name': name
                }).eq('id', user_id).execute()
                print("   ‚úÖ Profil mis √† jour avec r√¥le developer")
            else:
                # Cr√©er le profil
                profile_response = supabase.table('profiles').insert({
                    'id': user_id,
                    'email': email,
                    'name': name,
                    'role_id': 5,  # developer
                    'agency_id': None,
                    'is_active': True
                }).execute()
                print("   ‚úÖ Profil cr√©√©")
            
            # V√©rifier user_roles
            existing_user_role = supabase.table('user_roles').select('*').eq('user_id', user_id).execute()
            
            if len(existing_user_role.data) > 0:
                # Mettre √† jour
                update_ur_response = supabase.table('user_roles').update({
                    'role_id': 5,  # developer
                    'is_active': True
                }).eq('user_id', user_id).execute()
                print("   ‚úÖ User role mis √† jour")
            else:
                # Cr√©er
                user_role_response = supabase.table('user_roles').insert({
                    'user_id': user_id,
                    'role_id': 5,  # developer
                    'agency_id': None,
                    'is_active': True
                }).execute()
                print("   ‚úÖ User role cr√©√©")
            
            supabase.auth.sign_out()
            return True
        else:
            print("   ‚ùå √âchec de connexion")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Erreur mise √† jour: {str(e)}")
        return False

def test_developer_account():
    """Test du compte d√©veloppeur"""
    print("\nüß™ Test du compte d√©veloppeur...")
    
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    
    developer_email = "developer@example.com"
    developer_password = "dev123456"
    
    try:
        # Connexion
        auth_response = supabase.auth.sign_in_with_password({
            "email": developer_email,
            "password": developer_password
        })
        
        if auth_response.user:
            user_id = auth_response.user.id
            print(f"   ‚úÖ Connexion d√©veloppeur r√©ussie")
            
            # V√©rifier le r√¥le
            profile_response = supabase.table('profiles').select('*, roles(name, label)').eq('id', user_id).single().execute()
            
            if profile_response.data and profile_response.data.get('roles'):
                role_name = profile_response.data['roles']['name']
                print(f"   ‚úÖ R√¥le trouv√©: {role_name}")
                
                if role_name == "developer":
                    print(f"   ‚úÖ R√¥le developer confirm√©!")
                    print(f"   üìã Informations du compte:")
                    print(f"       - Email: {developer_email}")
                    print(f"       - Mot de passe: {developer_password}")
                    print(f"       - Nom: {profile_response.data.get('name')}")
                    print(f"       - Dashboard: /dashboard/developer")
                    
                    supabase.auth.sign_out()
                    return True
                else:
                    print(f"   ‚ö†Ô∏è  R√¥le incorrect: {role_name}")
            else:
                print(f"   ‚ùå Pas de r√¥le trouv√©")
            
            supabase.auth.sign_out()
            
        else:
            print(f"   ‚ùå √âchec de connexion d√©veloppeur")
            
    except Exception as e:
        print(f"   ‚ùå Erreur test d√©veloppeur: {str(e)}")
    
    return False

def main():
    print("üöÄ Cr√©ation du compte d√©veloppeur pour TransFlow Nexus")
    print("="*60)
    
    # 1. Cr√©er le compte d√©veloppeur
    success = create_developer_account()
    
    # 2. Tester le compte
    if success:
        test_success = test_developer_account()
        
        print("\n" + "="*60)
        if test_success:
            print("‚úÖ COMPTE D√âVELOPPEUR CR√â√â AVEC SUCC√àS!")
            print("\nüîë INFORMATIONS DE CONNEXION:")
            print("   Email: dev_admin@transflownexus.demo")
            print("   Mot de passe: dev123")
            print("   URL: http://localhost:8080/")
            print("   Dashboard: /dashboard/developer")
        else:
            print("‚ö†Ô∏è  Compte cr√©√© mais probl√®me lors du test")
    else:
        print("\n‚ùå √âchec de la cr√©ation du compte d√©veloppeur")

if __name__ == "__main__":
    main()